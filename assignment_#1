using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp3
{
    public static class Global
    {
        public static IDictionary<string, int> studentInfo = new Dictionary<string, int>(); // global variable for dictionary
    }

    class Program
    {
        public static void addStudent()
        {
            Boolean done = false;

            if (Global.studentInfo.Count < 5) // loop will not run if there's already 5 entries 
            {
                while (!done)
                {
                    Console.WriteLine("Please enter the name of the student, there are " + (5 - Global.studentInfo.Count) + " spaces avaliable:");
                    String rName = Console.ReadLine();

                    while (!done)
                    {
                        Console.WriteLine("Please enter the grade of the student from (0 - 100)");
                        int rGrade = int.Parse(Console.ReadLine());

                        if ((rGrade >= 0) && (rGrade <= 100)) // checks if input is in range of 0 - 100, otherwise will reject input and loop again 
                        {
                            Global.studentInfo.Add(rName, rGrade); // both key and grade inserted after all checks are done. 
                            done = true;
                        }
                        else
                            Console.WriteLine("Invalid input, please try again");
                    }

                    Console.WriteLine("Continue entering grades? Y/N"); // repeats loop
                    string rContinue = Console.ReadLine();

                    if (rContinue == "Y" && (Global.studentInfo.Count < 5)) // checks if there's more than 5 entries, will terminate loop if there is
                        done = false;

                    if (Global.studentInfo.Count >= 5)
                    {
                        Console.WriteLine("All spaces have been occupied, no more names can be inserted.");
                    }
                }
            }
            else
                Console.WriteLine("All spaces have been occupied, no more names can be inserted.");

        }

        static void printStudent()
        {
            foreach (KeyValuePair<string, int> kvp in Global.studentInfo) // foreach prints all grades
            {
                Console.WriteLine("Student Name: {0}, Grade: {1}", kvp.Key, kvp.Value);
            }
        }

        static void minStudent()
        {
            String minKey = Global.studentInfo.OrderByDescending(x => x.Value).Last().Key; // All key/grade sorted in descending order to find minimum
            Console.WriteLine("The student with the minimum grade is: " + minKey + " with a grade of " + Global.studentInfo[minKey]);
        }
        static void maxStudent()
        {
            String maxKey = Global.studentInfo.OrderByDescending(x => x.Value).First().Key;
            Console.WriteLine("The student with the maximum grade is: " + maxKey + " with a grade of " + Global.studentInfo[maxKey]);
        }

        static void Main(string[] args)
        {

            Boolean mDone = false;

            int rOption = 0;

            while (!mDone)
            {
                Console.WriteLine("Welcome to the student gradebook program, please select the options below."); // options
                Console.WriteLine("1. Add student names");
                Console.WriteLine("2. Terminate");
                Console.WriteLine("3. Print student names");
                Console.WriteLine("4. Print maximum grades.");
                Console.WriteLine("5. Print minimum grades.");

                rOption = int.Parse(Console.ReadLine());

                switch (rOption)
                {
                    case 1:
                        addStudent();
                        break;
                    case 2:
                        Console.WriteLine("Program terminated");
                        mDone = true;
                        break;
                    case 3:
                        if (Global.studentInfo.Count > 0) // if-else statement checks if dictionary is empty, max and min also printed
                        {
                            printStudent();
                            maxStudent();
                            minStudent();
                        }
                        else
                            Console.WriteLine("Function cannot be run, since there are no names inputted.");
                        break;
                    case 4:
                        if (Global.studentInfo.Count > 0)
                        {
                            maxStudent();
                        }
                        else
                            Console.WriteLine("Function cannot be run, since there are no names inputted.");
                        break;
                    case 5:
                        if (Global.studentInfo.Count > 0)
                        {
                            minStudent();
                        }
                        else
                            Console.WriteLine("Function cannot be run, since there are no names inputted.");
                        break;
                }
            }
        }
    }
}
